
@page
@model SalesForecastingApp.Pages.SalesModel
@{
    Layout = "_Layout";
}

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<div class="container mt-5">
    <h2>Sales Forecasting</h2>
    <form method="post" class="form-inline">
        <div class="form-group mb-2">
            <label for="Year" class="mr-2">Year: </label>
            <input type="number" class="form-control" id="Year" name="Year" value="@Model.Year" />
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <label for="PercentageIncrease" class="mr-2">Percentage Increase: </label>
            <input type="number" class="form-control" id="PercentageIncrease" name="PercentageIncrease" step="0.01" value="@Model.PercentageIncrease" />
        </div>
        <div class="form-group mx-sm-3 mb-2">
            <label for="SelectedState" class="mr-2">State:</label>
            <select class="form-control" id="SelectedState" name="SelectedState">
                <option value=""> All States </option>
                @foreach (var state in Model.States)
                {
                    <option value="@state">@state</option>
                }
            </select>
        </div>
        <button type="submit" class="btn btn-primary mb-2">Query Sales</button>
        <button type="submit" formaction="/Sales?handler=ExportToCsv" class="btn btn-secondary mb-2 ml-2">Export to CSV</button>
    </form>

    @if (Model.SalesData != null )
    {
        <h3>Sales Data</h3>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>State</th>
                    <th>Total Sales</th>
                    <th>Increased Sales</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.SalesData)
                {
                    <tr>
                        <td>@item.State</td>
                        <td>@item.OriginalSales</td>
                        <td>@item.IncreasedSales</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (Model.SalesData != null && Model.SalesData.Count > 0)
    {
        <div class="row mt-4">
            <div class="col-md-6">
                <h3>Breakdown by State</h3>
                <canvas id="aggregatedSalesChart"></canvas>
                <canvas id="breakdownByStateChart"></canvas>


            </div>
            </div>
    }
</div>
<script>
    // Getting the canvas context
    var aggregatedSalesChartCtx = document.getElementById('aggregatedSalesChart').getContext('2d');
    var breakdownByStateChartCtx = document.getElementById('breakdownByStateChart').getContext('2d');

    // Aggregated Sales Chart
    var aggregatedSalesChart = new Chart(aggregatedSalesChartCtx, {
        type: 'bar',
        data: {
            labels: ['Seeding Year', 'Forecasted Year'],
            datasets: [{
                label: 'Sales',
                data: [@(Model.AggregatedSeedingYearSales), @(Model.AggregatedForecastedYearSales)],
                backgroundColor: [
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 99, 132, 0.2)'
                ],
                borderColor: [
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 99, 132, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // Breakdown by State Chart
    var breakdownByStateLabels = [];
    var breakdownByStateOriginalSales = [];
    var breakdownByStateIncreasedSales = [];

    @foreach (var item in Model.BreakdownSalesData)
    {
        <text>
            breakdownByStateLabels.push('@item.State');
        breakdownByStateOriginalSales.push(@item.OriginalSales);
        breakdownByStateIncreasedSales.push(@item.IncreasedSales);
        </text>
    }

        var breakdownByStateChart = new Chart(breakdownByStateChartCtx, {
        type: 'bar',
        data: {
            labels: breakdownByStateLabels,
            datasets: [{
                label: 'Original Sales',
                data: breakdownByStateOriginalSales,
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }, {
                label: 'Increased Sales',
                data: breakdownByStateIncreasedSales,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>




